@page "/poker-room/{UserName}/{RoomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using ScrumPoker.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="poker-room">
    @if (_isConnected)
    {
        <div class="row">
            <div class="col-md-8">
                <div class="room-header">
                    <h2>Hoş Geldin, @UserName!</h2>
                    <div class="room-info">
                        <span>Oda ID: @RoomId</span>
                        <button class="btn btn-link" @onclick="CopyRoomId">
                            <i class="fas fa-copy"></i> Kopyala
                        </button>
                    </div>
                    <div class="connection-status connected">
                        <span class="status-dot"></span> Bağlı
                    </div>
                </div>
                <div class="voting-cards">
                    @{
                        string[] values = { "☕", "1", "2", "3", "5", "8", "13", "21", "34", "55", "89", "?" };
                        foreach (var value in values)
                        {
                            <button class="card @(value == _myVote ? "selected" : "")"
                                    @onclick="() => Vote(value)">
                                @value
                            </button>
                        }
                    }
                </div>
            </div>
            <div class="col-md-4">
                <div class="players-list">
                    <h4>Oyuncular (@_session.Players.Count)</h4>
                    @foreach (var player in _session.Players)
                    {
                        <div class="player">
                            <span>@player.UserName</span>
                            @if (player.HasVoted)
                            {
                                <span class="voted-badge">@(_session.VotesRevealed ? player.Vote : "Oylandı")</span>
                            }
                        </div>
                    }
                </div>

                @if (_session.VotesRevealed && _session.Players.Any(p => p.HasVoted))
                {
                    <div class="results mt-4">
                        <h4>Sonuçlar</h4>
                        <div class="result-item">
                            <span>Ortalama:</span>
                            <span class="value">@CalculateAverage()</span>
                        </div>
                        <div class="result-item">
                            <span>En Düşük:</span>
                            <span class="value">@GetMinVote()</span>
                        </div>
                        <div class="result-item">
                            <span>En Yüksek:</span>
                            <span class="value">@GetMaxVote()</span>
                        </div>
                    </div>
                }

                <div class="controls mt-4">
                    <button class="btn btn-primary" @onclick="RevealVotes">Oyları Göster</button>
                    <button class="btn btn-secondary" @onclick="ResetVotes">Sıfırla</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="connection-error">
            <h3>Bağlantı Hatası</h3>
            <p>@_connectionError</p>
            @if (_connectionError.Contains("kullanıcı adı zaten kullanımda"))
            {
                <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/planning-poker"))">
                    Ana Ekrana Dön
                </button>
            }
            else 
            {
                <button class="btn btn-primary" @onclick="InitializeConnection">
                    Yeniden Bağlan
                </button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string UserName { get; set; } = "";

    [Parameter]
    public string RoomId { get; set; } = "";

    private HubConnection? _hubConnection;
    private string _myVote = "";
    private PokerSession _session = new();
    private bool _isConnected;
    private string _connectionError = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/planningpokerhub").ToString().Replace("localhost:8080", "localhost:80"))
                .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(15) })
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Debug);
                })
                .Build();

            _hubConnection.ServerTimeout = TimeSpan.FromMinutes(30);
            _hubConnection.HandshakeTimeout = TimeSpan.FromMinutes(5);
            _hubConnection.KeepAliveInterval = TimeSpan.FromMinutes(15);

            SetupHubHandlers();

            await ConnectWithRetryAsync();
            Console.WriteLine("SignalR bağlantı URL'si: " + NavigationManager.ToAbsoluteUri("/planningpokerhub").ToString().Replace("localhost:8080", "localhost:80"));
        }
        catch (Exception ex)
        {
            _connectionError = $"Bağlantı hatası: {ex.Message}";
            Console.WriteLine($"SignalR Bağlantı Hatası: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task InitializeConnection()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/planningpokerhub"))
                .WithAutomaticReconnect()
                .Build();

            SetupHubHandlers();

            await _hubConnection.StartAsync();
            _isConnected = true;
            _connectionError = "";

            var checkResult = await _hubConnection.InvokeAsync<RoomJoinResult>("CheckRoom", RoomId);
            if (!checkResult.RoomExists)
            {
                _isConnected = false;
                _connectionError = "Oda bulunamadı.";
                StateHasChanged();
                return;
            }

            var result = await _hubConnection.InvokeAsync<JoinResult>("JoinRoom", RoomId, UserName);
            if (!result.Success)
            {
                _isConnected = false;
                _connectionError = result.ErrorMessage ?? "Giriş yapılamadı.";
                StateHasChanged();
                return;
            }

            _session = result.Session ?? new PokerSession();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _isConnected = false;
            _connectionError = $"Bağlantı hatası: {ex.Message}";
            StateHasChanged();
        }
    }

    private void SetupHubHandlers()
    {
        if (_hubConnection == null) return;

        _hubConnection.On<string>("UserJoined", (userName) =>
        {
            Console.WriteLine($"Kullanıcı katıldı: {userName}");
            StateHasChanged();
        });

        _hubConnection.On<string>("PlayerLeft", (userName) =>
        {
            Console.WriteLine($"Kullanıcı ayrıldı: {userName}");
            StateHasChanged();
        });

        _hubConnection.On<string, string>("VoteReceived", (userName, vote) =>
        {
            InvokeAsync(() =>
            {
                var player = _session.Players.FirstOrDefault(p => p.UserName == userName);
                if (player != null)
                {
                    player.Vote = vote;
                    StateHasChanged();
                }
            });
        });

        _hubConnection.On("VotesRevealed", () =>
        {
            InvokeAsync(() =>
            {
                _session.VotesRevealed = true;
                StateHasChanged();
            });
        });

        _hubConnection.On("VotesReset", () =>
        {
            InvokeAsync(() =>
            {
                foreach (var player in _session.Players)
                {
                    player.Vote = null;
                }
                _session.VotesRevealed = false;
                _myVote = "";
                StateHasChanged();
            });
        });

        _hubConnection.On<PokerSession>("UpdateSession", (session) =>
        {
            InvokeAsync(async () =>
            {
                Console.WriteLine($"Oturum güncellendi: {JsonSerializer.Serialize(session)}");
                _session = session;
                if (_session.VotesRevealed)
                {
                    await CheckConsensus();
                }
                StateHasChanged();
            });
        });

        _hubConnection.Reconnecting += (exception) =>
        {
            _isConnected = false;
            _connectionError = "Bağlantı yeniden kurulmaya çalışılıyor...";
            StateHasChanged();
            return Task.CompletedTask;
        };

        _hubConnection.Reconnected += async (connectionId) =>
        {
            try
            {
                _isConnected = true;
                _connectionError = "";
                
                var result = await _hubConnection.InvokeAsync<JoinResult>("JoinRoom", RoomId, UserName);
                if (result.Success)
                {
                    _session = result.Session ?? new PokerSession();
                }
                else
                {
                    _isConnected = false;
                    _connectionError = result.ErrorMessage ?? "Yeniden bağlanma başarısız oldu.";
                }
                
                StateHasChanged();
            }
            catch
            {
                _isConnected = false;
                _connectionError = "Yeniden bağlanma sırasında bir hata oluştu.";
                StateHasChanged();
            }
        };

        _hubConnection.Closed += async (exception) =>
        {
            _isConnected = false;
            _connectionError = exception?.Message ?? "Bağlantı kesildi. Yeniden bağlanmak için butona tıklayın.";
            StateHasChanged();
        };
    }

    private async Task Vote(string vote)
    {
        if (_hubConnection is null || !_isConnected) return;
        _myVote = vote;
        await _hubConnection.SendAsync("Vote", RoomId, UserName, vote);
    }

    private async Task RevealVotes()
    {
        if (_hubConnection is null || !_isConnected) return;
        await _hubConnection.SendAsync("RevealVotes", RoomId);
    }

    private async Task ResetVotes()
    {
        if (_hubConnection is null || !_isConnected) return;
        await _hubConnection.SendAsync("ResetVotes", RoomId);
    }

    private string CalculateAverage()
    {
        var numericVotes = _session.Players
            .Where(p => p.HasVoted && p.Vote != "?" && p.Vote != "☕")
            .Select(p => int.Parse(p.Vote!))
            .ToList();

        if (!numericVotes.Any()) return "-";
        
        var average = numericVotes.Average();
        return average.ToString("F1");
    }

    private string GetMinVote()
    {
        var numericVotes = _session.Players
            .Where(p => p.HasVoted && p.Vote != "?" && p.Vote != "☕")
            .Select(p => int.Parse(p.Vote!))
            .ToList();

        return numericVotes.Any() ? numericVotes.Min().ToString() : "-";
    }

    private string GetMaxVote()
    {
        var numericVotes = _session.Players
            .Where(p => p.HasVoted && p.Vote != "?" && p.Vote != "☕")
            .Select(p => int.Parse(p.Vote!))
            .ToList();

        return numericVotes.Any() ? numericVotes.Max().ToString() : "-";
    }

    private async Task CheckConsensus()
    {
        var votedPlayers = _session.Players.Where(p => p.HasVoted).ToList();
        if (votedPlayers.Count > 1 && votedPlayers.All(p => p.Vote == votedPlayers[0].Vote))
        {
            await JSRuntime.InvokeVoidAsync("triggerConfetti");
        }
    }

    private async Task CopyRoomId()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", RoomId);
    }

    private async Task ConnectWithRetryAsync()
    {
        while (true)
        {
            try
            {
                if (_hubConnection == null) return;

                await _hubConnection.StartAsync();
                _isConnected = true;
                _connectionError = "";

                var checkResult = await _hubConnection.InvokeAsync<RoomJoinResult>("CheckRoom", RoomId);
                if (!checkResult.RoomExists)
                {
                    _isConnected = false;
                    _connectionError = "Oda bulunamadı.";
                    StateHasChanged();
                    return;
                }

                var result = await _hubConnection.InvokeAsync<JoinResult>("JoinRoom", RoomId, UserName);
                if (!result.Success)
                {
                    _isConnected = false;
                    _connectionError = result.ErrorMessage ?? "Giriş yapılamadı.";
                    StateHasChanged();
                    return;
                }

                _session = result.Session ?? new PokerSession();
                StateHasChanged();
                return;
            }
            catch (Exception ex)
            {
                _isConnected = false;
                _connectionError = $"Bağlantı hatası: {ex.Message}";
                StateHasChanged();
                await Task.Delay(5000);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
} 